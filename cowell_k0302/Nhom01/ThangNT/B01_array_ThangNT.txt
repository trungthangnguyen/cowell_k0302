#1: Function: array_change_key_case
Tác dụng: 		Thay đổi mọi giá trị key trong một mảng thành chữ thường hoặc chữ hoa.
Mô tả: 			array array_change_key_case ( array $array [, int $case = CASE_LOWER ] )
Các thông số: 	array: Chỉ định mảng sử dụng
				case: CASE_UPPER hoặc CASE_LOWER (default)
Examples #1:
	<?php
	$input_array = array("FirSt" => 1, "SecOnd" => 4);
	print_r(array_change_key_case($input_array, CASE_UPPER));
	?>
Returns: trả key về chữ hoa
	Array
	(
	    [FIRST] => 1
	    [SECOND] => 4
	)

Examples #2: trả key về chữ thường
	<?php
	$age=array("Peter"=>"35","Ben"=>"37","Joe"=>"43");
	print_r(array_change_key_case($age,CASE_LOWER));
	?>

Returns:
	Array ( 
	[peter] => 35 
	[ben] => 37
	[joe] => 43 
	)

#2: Function: array_chunk
Tác dụng: 		Chia mảng thành các khối có size nhất định, khối cuối cùng có thể có ít phần tử hơn.
Mô tả:			array array_chunk ( array $array , int $size [, bool $preserve_keys = false ] )
các thông số:	array: Chỉ định mảng sử dụng
				size:	kích thước mỗi khối
				preserve_keys: 	True: 				Các khối có chỉ số bình thường
								False (default): 	Các khối có chỉ số tiếp nối các khối trước.
Example #1:
	<?php
	$input_array = array('a', 'b', 'c', 'd', 'e');
	print_r(array_chunk($input_array, 2));
	print_r(array_chunk($input_array, 2, true));
	?>

Returns:
	Array
	(
	    [0] => Array
	        (
	            [0] => a
	            [1] => b
	        )

	    [1] => Array
	        (
	            [0] => c
	            [1] => d
	        )

	    [2] => Array
	        (
	            [0] => e
	        )

	)

	Array
	(
	    [0] => Array
	        (
	            [0] => a
	            [1] => b
	        )

	    [1] => Array
	        (
	            [2] => c
	            [3] => d
	        )

	    [2] => Array
	        (
	            [4] => e
	        )

	)

Example #2:
<?php
$age=array("Peter"=>"35","Ben"=>"37","Joe"=>"43","Harry"=>"50");
print_r(array_chunk($age,2,true));
?>
Returns:
	Array ( 
	[0] => Array ( [Peter] => 35 [Ben] => 37 )
	[1] => Array ( [Joe] => 43 [Harry] => 50 ) )


#3: function array_column
Tác dụng: 	Trả về giá trị một cột trong mảng đầu vào.
Mô tả:		array array_column ( array $input , mixed $column_key [, mixed $index_key = null ] )
Các thông số:
			input: 		Một mảng đa chiều hoặc mảng các đối tượng mà từ đó lấy về một cột.
			column_key: Tên cột bằng số hoặc chuỗi của cột có giá trị trả về. Thông số này cũng có thể
						để NULL để trả lại mảng đầy đủ (hữu ích cùng với index_key để reindex mảng)
			index_key:	Không bắt buộc. Cột được sử dụng như index/keys cho  mảng được trả về.

Example #1: Lấy về cột 'last_name'. 

	<?php
	// Array representing a possible record set returned from a database
	$records = array(
	    array(
	        'id' => 2135,
	        'first_name' => 'John',
	        'last_name' => 'Doe',
	    ),
	    array(
	        'id' => 3245,
	        'first_name' => 'Sally',
	        'last_name' => 'Smith',
	    ),
	    array(
	        'id' => 5342,
	        'first_name' => 'Jane',
	        'last_name' => 'Jones',
	    ),
	    array(
	        'id' => 5623,
	        'first_name' => 'Peter',
	        'last_name' => 'Doe',
	    )
	);
	 
	$first_names = array_column($records, 'first_name');
	print_r($first_names);
	?>

Returns:
	Array
	(
	    [0] => John
	    [1] => Sally
	    [2] => Jane
	    [3] => Peter
	)

Example #2: sử dụng mảng $records từ Example #1, lấy cột 'last_name' với chỉ mục từ cột 'id'
	<?php
	$last_names = array_column($records, 'last_name', 'id');
	print_r($last_names);
	?>

Returns:
	Array
	(
	    [2135] => Doe
	    [3245] => Smith
	    [5342] => Jones
	    [5623] => Doe
	)

#4: Function array_combine
Tác dụng:	Tạo một mảng mới bằng cách sử dụng hai mảng khác, một mảng làm keys, một mảng làm values.
Mô tả:		array array_combine ( array $keys , array $values )
Các thông số:
			keys:	Mảng dùng làm keys được sử dụng. Các giá trị Illegal của keys sẽ được chuyển sang chuỗi.
			values:	Mảng dùng làm values được sử dụng.
Return Values: False nếu số phần tử mỗi mảng không bằng nhau. 
Example #1: Tạo mảng $c từ hai mảng $a và $b
	<?php
	$a = array('green', 'red', 'yellow');
	$b = array('avocado', 'apple', 'banana');
	$c = array_combine($a, $b);

	print_r($c);
	?>

Returns:
	Array
	(
	    [green]  => avocado
	    [red]    => apple
	    [yellow] => banana
	)

Example #2: Nếu hai keys có giá trị giống nhau, giá trị thứ 2 sẽ được ưu tiên.
	<?php
	print_r(array_combine(Array('a','a','b'), Array(1,2,3)));
	?>

Returns:
	Array
	(
	    [a] => 2
	    [b] => 3
	)

Example #3: Nếu cần giữ lại tất cả các giá trị, có thể sử dụng hàm như sau
<?php
function array_combine_($keys, $values)
{
    $result = array();
    foreach ($keys as $i => $k) {
        $result[$k][] = $values[$i];
    }
    array_walk($result, create_function('&$v', '$v = (count($v) == 1)? array_pop($v): $v;'));
    return    $result;
}

print_r(array_combine_(Array('a','a','b'), Array(1,2,3)));
?>

Returns:
	Array
	(
	    [a] => Array
	        (
	            [0] => 1
	            [1] => 2
	        )

	    [b] => 3
	)

Returns:
	Array
	(
	    [a] => Array
	        (
	            [0] => 1
	            [1] => 2
	        )

	    [b] => 3
	)
